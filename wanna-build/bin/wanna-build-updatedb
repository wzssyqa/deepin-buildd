#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright (C) 2012 Deepin Inc.
#
# Author: YunQiang Su <wzssyqa@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.

from WannaBuild import *
from WannaBuild.Common import *
from WannaBuild.Prefix import *
import sqlite3
import os
import syslog
import sys
import gzip
import time

def slice_packages(package_file):
    package = {}
    for line in package_file.readlines():
        if line.strip() == "":
            yield package
            package = {} 
        elif line[0] == ' ':
            if (type(package[key]) is list):
                package[key].append(line.strip())
        elif line[0] != ' ':
            key, val = line.strip().split(":", 1)
            strip_val = val.strip()
            package[key] = [] if strip_val == "" else strip_val

def r_d(para):
	return DashReplacer.join(para.split('-'))

def unr_d(para):
	return '-'.join(para.split(DashReplacer))

class UpdateDB:
	cfg=Config()
	lock=LockDB()
	def __init__(self, dist):
		self.dist=dist
		self.archive_dir = os.path.expanduser('%s/archive/%s/' % (userconfdir, self.dist))
		self.db_dir = os.path.expanduser('%s/database/' % userconfdir)
		self.make_sure_dirs([self.archive_dir, self.db_dir])
		self.sync_meta()
		self.update_src(self.dist)
		self.update_bin(self.dist)
	
	def make_sure_dirs(self, dirs):
		for i in dirs:
			try:
				os.makedirs(i)
			except:
				if (not os.path.isdir(i)) or (not os.access(i, os.W_OK)):
					print('%s is not an directory or can not be write.\n')
					exit(-1)
	
	def sync_meta(self):
		
		distconf=self.cfg.items(self.dist)
		os.system('ARCHIVE=%s DIST=%s DESTDIR=%s rsync-archive-meta' % (distconf['archive'], self.dist, self.archive_dir))
	
	def update_one_src(self, suit, comp):
		self.lock.lock()
		try:  ### Can not open DB?
			db = sqlite3.connect(os.path.expanduser(dbfile))
		except:
			self.lock.release()
			print('Open DB error\n')
			exit(-1)
		c = db.cursor()
		##### Update sid_main table, for source only
		try: ### try to create table first.
			cmd='CREATE TABLE %s_%s (name TEXT, version TEXT, arch TEXT, stats TEXT, resource INT, urgency INT, timestamp INT)' % (r_d(suit), r_d(comp))
			c.execute(cmd)
		except:
			pass
		f=gzip.open('%s/%s/%s/source/Sources.gz' % (self.archive_dir, suit, comp))
		for package in slice_packages(f):
			self.update_src_db(c, package, suit, comp)
		
		cmd='DELETE FROM %s_%s where timestamp<%s-86400' % (r_d(suit), r_d(comp), int(time.time()))
		c.execute(cmd)
		db.commit()
		db.close()
		self.lock.release()
	
	def update_one_bin(self, suit, comp, arch):
		self.lock.lock()
		try:  ### Can not open DB?
			db = sqlite3.connect(os.path.expanduser(dbfile))
		except:
			self.lock.release()
			print('Open DB error\n')
			exit(-1)
		c = db.cursor()
		##### Update sid_main table, for source only
		try: ### try to create table first.
			cmd='CREATE TABLE %s_%s_bin (name TEXT, version TEXT, source TEXT, arch TEXT, timestamp INT)' % (r_d(suit), r_d(comp))
			c.execute(cmd)
		except:
			pass
		f=gzip.open('%s/%s/%s/binary-%s/Packages.gz' % (self.archive_dir, suit, comp, arch))
		for package in slice_packages(f):
			self.update_bin_db(c, package, suit, comp)
		
		cmd='DELETE FROM %s_%s where timestamp<%s-86400' % (r_d(suit), r_d(comp), int(time.time()))
		c.execute(cmd)
		db.commit()
		db.close()
		self.lock.release()
	
	def update_src(self, dist):
		suits=self.cfg.get(dist, 'suits').split(' ')
		components=self.cfg.get(dist, 'components').split(' ')
		for i in [[s,c] for s in suits for c in components]:
			self.update_one_src(i[0], i[1])
	
	def update_bin(self, dist):
		suits=self.cfg.get(dist, 'suits').split(' ')
		components=self.cfg.get(dist, 'components').split(' ')
		for st in suits:
			sm=st.split('-',1)
			archs=self.cfg.get(dist, 'arch_'+sm[0]).split(' ')
			for i in [[s, c, a] for s in [st] for c in components for a in archs]:
					self.update_one_bin(i[0], i[1], i[2])

	def update_src_db(self, c, source, suit, comp):
		try:
			cmd='UPDATE %s_%s SET version="%s" timestamp="%s" WHERE name="%s"' % (r_d(suit), r_d(comp), source['Version'], int(time.time()), source['Package'])
			c.execute(cmd)	
		except:
			cmd='INSERT INTO %s_%s (name,version,timestamp) VALUES ("%s","%s",%s)' % (r_d(suit), r_d(comp), source['Package'], source['Version'], int(time.time()))
			c.execute(cmd)

	def update_bin_db(self, c, source, suit, comp):
		try:
			cmd='UPDATE %s_%s_bin SET version="%s" source="%s" timestamp=%s WHERE name="%s" arch="%s"' % (r_d(suit), r_d(comp), source['Version'], source['Source'], int(time.time()), source['Package'], source['Architecture'])
			c.execute(cmd)
		except:
			cmd='INSERT INTO %s_%s_bin (name, version, source, arch, timestamp) VALUES ("%s", "%s", "%s", "%s", %s)' % (r_d(suit), r_d(comp), source['Package'], source['Version'], source['Package'], source['Architecture'], int(time.time()))
			c.execute(cmd)

def get_defaults_dist():
	cfg=Config()
	dists = cfg.get('default', 'enabled')
	return dists

def usage():
	print('Usage: wanna-build-updatedb [<distribution1> [<distribution2> ...]]\n')
	exit(-1)


def update_dists(dists):
	for d in dists:
		UpdateDB(d)

if __name__=='__main__':
	if len(sys.argv)==1:
		dist = get_defaults_dist()
		UpdateDB(dist)
	else:
		update_dists(sys.argv[1:])
