#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright (C) 2012 Deepin Inc.
#
# Author: YunQiang Su <wzssyqa@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.

from WannaBuild import *
from WannaBuild.Common import *
from WannaBuild.Prefix import *
import sqlite3
import os
import syslog
import sys
import gzip
import time



class UpdateDB:
	cfg=Config()
	lock=LockDB()
	def __init__(self, dist):
		self.dist=dist
		self.archive_dir = os.path.expanduser('%s/archive/%s/' % (userconfdir, self.dist))
		self.db_dir = os.path.expanduser('%s/database/' % userconfdir)
		self.make_sure_dirs([self.archive_dir, self.db_dir])
		self.sync_meta()
		self.update_src(self.dist)
		self.update_bin(self.dist)
	
	def make_sure_dirs(self, dirs):
		for i in dirs:
			try:
				os.makedirs(i)
			except:
				if (not os.path.isdir(i)) or (not os.access(i, os.W_OK)):
					print('%s is not an directory or can not be write.\n')
					exit(-1)
	
	def sync_meta(self):
		
		distconf=self.cfg.items(self.dist)
		os.system('ARCHIVE=%s DIST=%s DESTDIR=%s rsync-archive-meta' % (distconf['archive'], self.dist, self.archive_dir))
	
	def update_one_src(self, suit, comp):
		self.lock.lock()
		try:  ### Can not open DB?
			db = sqlite3.connect(os.path.expanduser(dbfile))
		except:
			self.lock.release()
			print('Open DB error\n')
			exit(-1)
		c = db.cursor()
		##### Update sid_main table, for source only
		try: ### try to create table first.
			c.execute('''CREATE TABLE ?_? (name TEXT, version TEXT, arch TEXT,
				stats TEXT, resource INT, urgency INT, timestamp INT)''', suit, comp)
		except:
			pass
		f=gzip.open('%s/%s/%s/source/Sources.gz' % (self.archive_dir, suit, comp))
		file_content = f.readlines()
		source = {}
		i=0
		while i<len(file_content):
			t=file_content[i][0:-1]
			if len(t)==0:
				self.update_src_db(c, source, suit, comp)
			elif t[-1]==':':
				j=i+1
				tmp=''
				while file_content[j][0]==' ':
					tmp+=file_content[j]
					j+=1
				source[t[0:-1]]=tmp
			elif t[0]==' ':
				pass
			else:
				tmp = t.split(': ')
				source[tmp[0]]=tmp[1]
			i+=1
		
		c.execute('''DELETE FROM ?_? where timestamp<?-86400''', 
			(suit, comp, int(time.time())))
		c.commit()
		db.close()
		self.lock.release()
	
	def update_one_bin(self, suit, comp, arch):
		self.lock.lock()
		try:  ### Can not open DB?
			db = sqlite3.connect(os.path.expanduser(dbfile))
		except:
			self.lock.release()
			print('Open DB error\n')
			exit(-1)
		c = db.cursor()
		##### Update sid_main table, for source only
		try: ### try to create table first.
			c.execute('''CREATE TABLE ?_?_bin (name TEXT, version TEXT, arch TEXT, timestamp INT)''', suit, comp)
		except:
			pass
		f=gzip.open('%s/%s/%s/binary-%s/Packages.gz' % (self.archive_dir, suit, comp, arch))
		file_content = f.readlines()
		source = {}
		i=0
		while i<len(file_content):
			t=file_content[i]
			if len(t)==0:
				self.update_bin_db(c, source, suit, comp)
			else:
				tmp = t.split(': ')
				source[tmp[0]]=tmp[1]
			i+=1
		
		c.execute('''DELETE FROM ?_? where timestamp<?-86400''', 
			(suit, comp, int(time.time())))
		c.commit()
		db.close()
		self.lock.release()
	
	def update_src(self, dist):
		suits=self.cfg.get(dist, 'suits').split(' ')
		components=self.cfg.get(dist, 'components').split(' ')
		for s in suits:
			for c in components:
				self.update_one_src(s, c)
	
	def update_bin(self, dist):
		suits=self.cfg.get(dist, 'suits').split(' ')
		components=self.cfg.get(dist, 'components').split(' ')
		for s in suits:
			archs=self.cfg.get(dist, 'arch_'+s).split(' ')
			for c in components:
				for a in archs:
					self.update_one_bin(s, c, a)


	def update_src_db(self, c, source, suit, comp):
		try:
			c.execute('''UPDATE ?_? SET version=? timestamp=? WHERE name=? ''', 
				(suit, comp, source['Version'], int(time.time()), source['Package']))
		except:
			c.execute('''INSERT INTO ?_? (name,version,timestamp) VALUES (?,?,?)''', 
				(suit, comp, source['Package'], source['Version'], int(time.time())))

	def update_bin_db(self, c, source, suit, comp, arch):
		try:
			c.execute('''UPDATE ?_?_bin SET version=? timestamp=? WHERE name=? arch=? ''', 
				(suit, comp, source['Version'], int(time.time()), source['Package']))
		except:
			c.execute('''INSERT INTO ?_?_bin (name, version, arch, timestamp) VALUES (?, ?, ?, ?)''', 
				(suit, comp, source['Package'], source['Version'], arch, int(time.time())))


def get_defaults_dist():
	cfg=Config()
	dists = cfg.get('default', 'enabled')
	return dists

def usage():
	print('Usage: wanna-build-updatedb [<distribution1> [<distribution2> ...]]\n')
	exit(-1)


def update_dists(dists):
	for d in dists:
		UpdateDB(d)

if __name__=='__main__':
	if len(sys.argv)==1:
		dist = get_defaults_dist()
		UpdateDB(dist)
	else:
		update_dists(sys.argv[1:])
